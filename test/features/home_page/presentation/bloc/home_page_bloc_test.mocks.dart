// Mocks generated by Mockito 5.4.4 from annotations
// in weather_app_flutter/test/features/home_page/presentation/bloc/home_page_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:weather_app_flutter/core/error/failures.dart' as _i5;
import 'package:weather_app_flutter/features/home_page/data/models/geocoding_dto.dart'
    as _i8;
import 'package:weather_app_flutter/features/home_page/data/models/weather_dto.dart'
    as _i6;
import 'package:weather_app_flutter/features/home_page/domain/usecase/get_city_by_name_usecase.dart'
    as _i7;
import 'package:weather_app_flutter/features/home_page/domain/usecase/get_weather_data_usecase.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GetWeatherDataUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetWeatherDataUseCase extends _i1.Mock
    implements _i3.GetWeatherDataUseCase {
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.WeatherDto>> getWeatherDataByLatLon({
    required double? lat,
    required double? lon,
    required String? units,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getWeatherDataByLatLon,
          [],
          {
            #lat: lat,
            #lon: lon,
            #units: units,
          },
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.WeatherDto>>.value(
            _FakeEither_0<_i5.Failure, _i6.WeatherDto>(
          this,
          Invocation.method(
            #getWeatherDataByLatLon,
            [],
            {
              #lat: lat,
              #lon: lon,
              #units: units,
            },
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, _i6.WeatherDto>>.value(
                _FakeEither_0<_i5.Failure, _i6.WeatherDto>(
          this,
          Invocation.method(
            #getWeatherDataByLatLon,
            [],
            {
              #lat: lat,
              #lon: lon,
              #units: units,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.WeatherDto>>);
}

/// A class which mocks [GetCityByNameUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetCityByNameUseCase extends _i1.Mock
    implements _i7.GetCityByNameUseCase {
  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i8.GeocodingDto>>> getCityByName(
          {required String? cityName}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCityByName,
          [],
          {#cityName: cityName},
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, List<_i8.GeocodingDto>>>.value(
                _FakeEither_0<_i5.Failure, List<_i8.GeocodingDto>>(
          this,
          Invocation.method(
            #getCityByName,
            [],
            {#cityName: cityName},
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, List<_i8.GeocodingDto>>>.value(
                _FakeEither_0<_i5.Failure, List<_i8.GeocodingDto>>(
          this,
          Invocation.method(
            #getCityByName,
            [],
            {#cityName: cityName},
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i8.GeocodingDto>>>);
}
